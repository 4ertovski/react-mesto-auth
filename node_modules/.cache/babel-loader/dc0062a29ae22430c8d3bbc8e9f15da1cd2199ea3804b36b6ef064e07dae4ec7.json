{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  // обработчик респонсов сервера\n  _handleResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Error! : ${res.status}`);\n    }\n  }\n\n  // получение начальных данных от пользователя\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n\n  // получение серверных карточек\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n\n  //установка данных профиля\n  patchUserProfile(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(this._handleResponse);\n  }\n\n  // смена аватара\n  patchAvatar(avatar) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        /*avatar: avatar.link*/\n        avatar: avatar.avatar\n      })\n    }).then(this._handleResponse);\n  }\n  postUserCard(item) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: item.name,\n        link: item.link\n      })\n    }).then(this._handleResponse);\n  }\n\n  // лайк\n  putLike(id) {\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n\n  // удалить лайк\n  deleteLike(id) {\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n\n  // удалить карточку\n  deleteCard(card) {\n    return fetch(`${this._baseUrl}/cards/${card}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n}\nexport const api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-60',\n  headers: {\n    authorization: '3aa61c49-fdf8-469f-ac89-ecfdfa4ec988',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","_ref","baseUrl","headers","_baseUrl","_headers","_handleResponse","res","ok","json","Promise","reject","status","getUserInfo","fetch","then","getInitialCards","patchUserProfile","data","method","body","JSON","stringify","name","about","patchAvatar","avatar","postUserCard","item","link","putLike","id","deleteLike","deleteCard","card","api","authorization"],"sources":["/Users/les/dev/mesto-react/src/utils/api.js"],"sourcesContent":["class Api {\n    constructor({baseUrl, headers}) {\n        this._baseUrl = baseUrl;\n        this._headers = headers;\n    }\n\n    // обработчик респонсов сервера\n    _handleResponse(res){\n        if (res.ok) {\n            return res.json();\n        } else {\n            return Promise.reject(`Error! : ${res.status}`)\n        }\n\n    }\n\n    // получение начальных данных от пользователя\n    getUserInfo() {\n        return fetch(`${this._baseUrl}/users/me`, {\n            headers: this._headers\n        })\n            .then(this._handleResponse)\n    }\n\n\n    // получение серверных карточек\n    getInitialCards() {\n        return fetch(`${this._baseUrl}/cards`, {\n                headers: this._headers\n            }\n        )\n            .then(this._handleResponse)\n    }\n\n    //установка данных профиля\n    patchUserProfile(data) {\n        return fetch(`${this._baseUrl}/users/me`,\n            {\n                method: 'PATCH',\n                headers: this._headers,\n                body: JSON.stringify({\n                    name: data.name,\n                    about: data.about\n                })\n            })\n            .then(this._handleResponse)\n    }\n\n    // смена аватара\n    patchAvatar(avatar) {\n        return fetch(`${this._baseUrl}/users/me/avatar`,  {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                /*avatar: avatar.link*/\n                avatar: avatar.avatar\n            })\n        })\n            .then(this._handleResponse)\n    }\n\n    postUserCard(item) {\n        return fetch(`${this._baseUrl}/cards`,  {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: item.name,\n                link: item.link\n            })\n        })\n            .then(this._handleResponse)\n    }\n\n    // лайк\n    putLike(id) {\n        return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n                method: 'PUT',\n                headers: this._headers\n            }\n        )\n            .then(this._handleResponse)\n    }\n\n    // удалить лайк\n    deleteLike(id) {\n        return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n                method: 'DELETE',\n                headers: this._headers\n            }\n        )\n            .then(this._handleResponse)\n    }\n\n    // удалить карточку\n    deleteCard(card) {\n        return fetch(`${this._baseUrl}/cards/${card}`,  {\n                method: 'DELETE',\n                headers: this._headers\n            }\n        )\n            .then(this._handleResponse)\n    }\n}\nexport const api = new Api({ baseUrl:'https://mesto.nomoreparties.co/v1/cohort-60',\n    headers: {\n        authorization: '3aa61c49-fdf8-469f-ac89-ecfdfa4ec988',\n        'Content-Type': 'application/json'\n    }\n});\n\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}